{"version":3,"sources":["images/logo-hvit-nopadding.png","fonts/AvenirLTStd-Book.otf","fonts/AvenirLTStd-Medium.otf","fonts/AvenirLTStd-Roman.otf","fonts/Avenir-Black.otf","questions.js","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","title","type","ProgressContainer","numberFilled","numberOfDots","className","Array","fill","map","_","idx","Form","inputRef","useState","currentQuestionIdx","setCurrentQuestionIdx","answers","setAnswers","status","setStatus","question","questions","ref","placeholder","value","onChange","e","updatedAnswers","target","onBlur","preventDefault","stopPropagation","onClick","Math","max","length","a","async","fetch","method","headers","body","JSON","stringify","records","fields","country_and_team","motivation","why_interested","why_your_team","contact_information","postAnswers","current","focus","disabled","App","useEffect","ReactGA","initialize","event","category","action","useRef","window","scrollTo","behavior","top","offsetTop","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1db34a85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-hvit-nopadding.59b0f1e5.png\";","module.exports = __webpack_public_path__ + \"static/media/AvenirLTStd-Book.ecb0c2ae.otf\";","module.exports = __webpack_public_path__ + \"static/media/AvenirLTStd-Medium.4f995fa4.otf\";","module.exports = __webpack_public_path__ + \"static/media/AvenirLTStd-Roman.b1d7c6e0.otf\";","module.exports = __webpack_public_path__ + \"static/media/Avenir-Black.d751de38.otf\";","export default [\n  {\n    key: \"country_and_team\",\n    title:\n      \"We want to know who’s interested in joining this experience, which country and team are you applying for?\",\n    type: \"SMALL\"\n  },\n\n  {\n    key: \"motivation\",\n    title: \"What is your teams motivation for playing in The Experience?\",\n    type: \"LARGE\"\n  },\n\n  {\n    key: \"why_interested\",\n    title:\n      \"How did you hear about the experience, and why are you interested to apply?\",\n    type: \"LARGE\"\n  },\n\n  {\n    key: \"why_your_team\",\n    title: \"Why should we pick you to be a part of this experience with us?\",\n    type: \"LARGE\"\n  },\n  {\n    key: \"contact_information\",\n    title:\n      \"Please leave your contact information to contact you in case your team is selected to attend The Experience. Email, phone-number and name\",\n    type: \"LARGE\"\n  }\n];\n","import React, { useState } from \"react\";\nimport questions from \"./questions\";\nimport \"./form.css\";\n\nconst postAnswers = async answers => {\n  const url =\n    \"https://us-central1-the-experience-262716.cloudfunctions.net/signup\";\n\n  await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      records: [\n        {\n          fields: {\n            country_and_team: answers[0],\n            motivation: answers[1],\n            why_interested: answers[2],\n            why_your_team: answers[3],\n            contact_information: answers[4]\n          }\n        }\n      ]\n    })\n  });\n\n  return false;\n};\n\nconst ProgressContainer = ({ numberFilled, numberOfDots }) => (\n  <div className=\"progress-container\">\n    <div className=\"progress-bar\">\n      {Array(numberOfDots)\n        .fill()\n        .map((_, idx) => (\n          <div\n            key={idx}\n            className={idx < numberFilled ? \"dot filled\" : \"dot\"}\n          />\n        ))}\n    </div>\n  </div>\n);\n\nconst Form = ({ inputRef }) => {\n  const [currentQuestionIdx, setCurrentQuestionIdx] = useState(0);\n  const [answers, setAnswers] = useState([\"\", \"\", \"\", \"\", \"\"]);\n  const [status, setStatus] = useState(\"INITIAL\");\n\n  const question = questions[currentQuestionIdx];\n\n  const nextQuestion = () => {\n    if (currentQuestionIdx === questions.length - 1) {\n      postAnswers(answers);\n      setStatus(\"DONE\");\n    } else {\n      setCurrentQuestionIdx(currentQuestionIdx + 1);\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div className=\"form-wrapper\">\n      <h3 className=\"form-title\">\n        To give you the best volleyball experience in history, we need to ask\n        you some questions about you and your team\n      </h3>\n      {status === \"DONE\" && (\n        <div className=\"done-message\">\n          Thanks for applying! We will shortly send you a confirmation email,\n          and require more information about your team. If you have any\n          questions, feel free to reach out to us on facebook or Instagram!\n        </div>\n      )}\n      <div className=\"form-input-container\">\n        <label className=\"form-inputfield-label\">{question.title}</label>\n        <textarea\n          ref={inputRef}\n          className={`form-inputfield ${\n            question.type === \"LARGE\" ? \"large\" : \"\"\n          }`}\n          placeholder=\"Answer...\"\n          value={answers[currentQuestionIdx]}\n          onChange={e => {\n            const updatedAnswers = [...answers];\n            updatedAnswers[currentQuestionIdx] = e.target.value;\n            setAnswers(updatedAnswers);\n          }}\n          onBlur={e => {\n            e.preventDefault();\n            e.stopPropagation();\n          }}\n        ></textarea>\n\n        <div className=\"form-button-container\">\n          {currentQuestionIdx > 0 && (\n            <span\n              className=\"back-button\"\n              onClick={() =>\n                setCurrentQuestionIdx(Math.max(0, currentQuestionIdx - 1))\n              }\n            >\n              Back\n            </span>\n          )}\n\n          <button\n            className=\"submit-button\"\n            onClick={nextQuestion}\n            disabled={answers[currentQuestionIdx] === \"\"}\n            type=\"button\"\n          >\n            {currentQuestionIdx === questions.length - 1 ? \"Apply\" : \"Next\"}\n          </button>\n        </div>\n        <ProgressContainer\n          numberFilled={currentQuestionIdx + 1}\n          numberOfDots={questions.length}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React, { useEffect, useRef } from \"react\";\nimport ReactGA from \"react-ga\";\nimport Form from \"./Form\";\nimport logo from \"./images/logo-hvit-nopadding.png\";\n\nimport \"./App.css\";\nimport \"./hexagons.css\";\n\nconst App = () => {\n  useEffect(() => {\n    ReactGA.initialize(\"UA-154697902-1\");\n    ReactGA.event({\n      category: \"View\",\n      action: \"Page loaded\"\n    });\n  }, []);\n\n  const inputRef = useRef(null);\n\n  return (\n    <div className=\"app\">\n      <div className=\"header-container\">\n        <div className=\"info-container\">\n          <h1 className=\"title\"> The Experience </h1>\n          <h2 className=\"subtitle\"> Oslo// 1-3 May 2020 </h2>\n          <p className=\"description\">\n            For up and coming volleyball teams in Europe with a prizepool of\n            €20&nbsp;000\n          </p>\n        </div>\n        <div className=\"hexagon-top-yellow\" />\n        <div className=\"hexagon-left-blue\" />\n        <div className=\"hexagon-top-blue\" />\n        <div className=\"hexagon-right-yellow\" />\n        <div className=\"button-container\">\n          <button\n            className=\"apply-button\"\n            onClick={() => {\n              window.scrollTo({\n                behavior: \"smooth\",\n                top: inputRef.current.offsetTop\n              });\n              inputRef.current.focus();\n            }}\n          >\n            Apply now\n          </button>\n        </div>\n        <img src={logo} className=\"x-logo\" alt=\"x-logo\" />\n      </div>\n      <div className=\"bottom-content\">\n        <Form inputRef={inputRef} />\n        <h2 className=\"the-experience-quote\">The Experience</h2>\n        <p className=\"the-experience-sound\">/ðə ɛkˈspɪərɪəns/</p>\n        <p className=\"the-experience-meaning\">\n          the event or occurence which leads an impression on someone\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./fonts/AvenirLTStd-Book.otf\";\nimport \"./fonts/AvenirLTStd-Medium.otf\";\nimport \"./fonts/AvenirLTStd-Roman.otf\";\nimport \"./fonts/Avenir-Black.otf\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import Placeholder from \"./Placeholder\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}