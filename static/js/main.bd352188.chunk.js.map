{"version":3,"sources":["images/logo-hvit-nopadding.png","fonts/AvenirLTStd-Book.otf","fonts/AvenirLTStd-Medium.otf","fonts/AvenirLTStd-Roman.otf","fonts/Avenir-Black.otf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","nvbf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,iD,uDCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,iKCuC5BC,MAlCf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,SAAd,oBACA,wBAAIA,UAAU,YAAd,yBACA,uBAAGA,UAAU,eAAb,iDAIF,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,yBAEf,yBAAKA,UAAU,oBACb,4BAAQA,UAAU,gBAAlB,gBAEF,yBAAKC,IAAKC,IAAMF,UAAU,YAE5B,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,wBAAd,kBACA,uBAAGA,UAAU,wBAAb,2DACA,uBAAGA,UAAU,0BAAb,+DAGA,yBAAKG,IAAI,YAAYF,IAAKG,IAAMJ,UAAU,cAC1C,uBAAGA,UAAU,cAAb,wBCrBYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bd352188.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-hvit-nopadding.59b0f1e5.png\";","module.exports = __webpack_public_path__ + \"static/media/AvenirLTStd-Book.ecb0c2ae.otf\";","module.exports = __webpack_public_path__ + \"static/media/AvenirLTStd-Medium.4f995fa4.otf\";","module.exports = __webpack_public_path__ + \"static/media/AvenirLTStd-Roman.b1d7c6e0.otf\";","module.exports = __webpack_public_path__ + \"static/media/Avenir-Black.d751de38.otf\";","import React from \"react\";\nimport logo from \"./images/logo-hvit-nopadding.png\";\nimport nvbf from \"./images/logo-hvit-nopadding.png\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header-container\">\n        <div className=\"info-container\">\n          <h1 className=\"title\"> The Experience </h1>\n          <h2 className=\"subtitle\"> Oslo// 1-3 May 2020 </h2>\n          <p className=\"description\">\n            For up and coming volleyball teams in Europe\n          </p>\n        </div>\n        <div className=\"hexagon-top-yellow\" />\n        <div className=\"hexagon-left-blue\" />\n        <div className=\"hexagon-top-blue\" />\n        <div className=\"hexagon-right-yellow\" />\n\n        <div className=\"button-container\">\n          <button className=\"apply-button\"> Apply now </button>\n        </div>\n        <img src={logo} className=\"x-logo\" />\n      </div>\n      <div className=\"bottom-content\">\n        <h2 className=\"the-experience-quote\">The Experience</h2>\n        <p className=\"the-experience-sound\">/ðə ɛkˈspɪərɪəns/</p>\n        <p className=\"the-experience-meaning\">\n          the event or occurence which leads an impression on someone\n        </p>\n        <img alt=\"nvbf logo\" src={nvbf} className=\"nvbf-logo\" />\n        <p className=\"nvbf-title\">Supported by HVBF</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./fonts/AvenirLTStd-Book.otf\";\nimport \"./fonts/AvenirLTStd-Medium.otf\";\nimport \"./fonts/AvenirLTStd-Roman.otf\";\nimport \"./fonts/Avenir-Black.otf\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}